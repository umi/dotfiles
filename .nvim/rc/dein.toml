[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
	let g:deoplete#enable_at_startup = 1
	let g:deoplete#enable_ignore_case = 1
	let g:deoplete#enable_smart_case = 1

	let g:deoplete#ctags_arguments_list = {
	\ 'php' : '-R --languages=PHP --langmap=PHP:.php.inc --php-types=c+f+d'
	\}

	" Key-mappings and Events " {{{
	" ---

	" Movement within 'ins-completion-menu'
	imap <expr><C-j>   pumvisible() ? "\<Down>" : "\<C-j>"
	imap <expr><C-k>   pumvisible() ? "\<Up>" : "\<C-k>"

	inoremap <silent><expr><CR> pumvisible() ? deoplete#close_popup() : "\<CR>"

	" <Tab> completion:
	imap <silent><expr><Tab> pumvisible() ? "\<Down>" : (<SID>is_whitespace() ? "\<Tab>" : deoplete#manual_complete())

	smap <silent><expr><Tab> pumvisible() ? "\<Down>" : (<SID>is_whitespace() ? "\<Tab>" : deoplete#manual_complete())

	inoremap <expr><S-Tab>  pumvisible() ? "\<Up>" : "\<C-h>"

	function! s:is_whitespace() "{{{
		let col = col('.') - 1
		return ! col || getline('.')[col - 1] =~? '\s'
	endfunction "}}}
	" }}}
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

# カーソル位置のコンテキストに合わせてftを切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# カーソル位置のコンテキストのftを判定するライブラリ
[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
	let g:context_filetype#search_offset = 300
'''

# toml syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# 括弧囲みの編集操作
[[plugins]]
repo = 'anyakichi/vim-surround'

#[[plugins]]
#repo = 'Shougo/neomru'

# :DirDiff <A:Src Directory> <B:Src Directory> でディレクトリ比較
[[plugins]]
repo = 'vim-scripts/DirDiff.vim'

# utillity
[[plugins]]
repo = 'vim-scripts/L9'

[[plugins]]
repo = 'vim-scripts/SudoEdit.vim'

# Qfix howm メモツール
[[plugins]]
repo = 'glidenote/memolist.vim'

# HyblidText
[[plugins]]
repo = 'vim-scripts/HybridText'

# セッション
[[plugins]]
repo = 'xolox/vim-session'
depends = ['vim-misc']
[[plugins]]
repo = 'xolox/vim-misc'

# swapファイルリカバリ
[[plugins]]
repo = 'chrisbra/Recover.vim'

# 保存時ctags自動生成
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
	" ctags自動生成
	let g:auto_ctags = 0
	let g:auto_ctags_directory_list = ['.git']
	let g:auto_ctags_tags_args = '--tag-relative --recurse --sort=yes --langmap=PHP:+.inc --languages=php --php-kinds=cfd'
'''

# 履歴
[[plugins]]
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'Shougo/vimfiler'

[[plugins]]
repo = 'tpope/vim-fugitive'

# ,,でトグルでコメントアウト
[[plugins]]
repo = 'scrooloose/nerdcommenter'

# URLエンコード、デコードするためのプラグイン
[[plugins]]
repo = 'koron/chalice'


# プロジェクト
[[plugins]]
repo = 'scrooloose/nerdtree'

# xdebgu
[[plugins]]
repo = 'joonty/vdebug'

# submode
[[plugins]]
repo = 'kana/vim-submode'

# textobj
[[plugins]]
repo = 'kana/vim-textobj-user'

# textobj
[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'

# 構文チェック
[[plugins]]
repo = 'scrooloose/syntastic.git'

# html/css入力補助
[[plugins]]
repo = 'mattn/emmet-vim'

# URLを開く
[[plugins]]
repo = 'vim-scripts/open-browser.vim'

# :make時のエラーマーカーを表示
[[plugins]]
repo = 'itchyny/lightline.vim'

# smooth_scroll.vim : スクロールを賢く
[[plugins]]
repo = 'vim-scripts/Smooth-Scroll'


# colorscheme desert
[[plugins]]
repo = 'fugalh/desert.vim'

# nginx conf
[[plugins]]
repo = 'vim-scripts/nginx.vim'

# SQL の整形のために必要なプラグイン
[[plugins]]
repo = 'vim-scripts/Align'

# smarty シンタックスハイライト
[[plugins]]
repo = 'vim-scripts/smarty-syntax'

# Scalaのハイライト
[[plugins]]
repo = 'derekwyatt/vim-scala'

# fzf
[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
	nnoremap <silent> <C-]> :call fzf#vim#tags(expand('<cword>'))<CR>
	let g:fzf_action = {
		\ 'ctrl-c': 'tab split',
		\ 'ctrl-n': 'tab split',
		\ 'ctrl-x': 'split',
		\ 'ctrl-v': 'vsplit' }
	let g:fzf_buffers_jump = 1
	let g:fzf_layout = { 'window': 'enew' }
	command! -bang -nargs=* Rg
		\ call fzf#vim#grep(
		\   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
		\   <bang>0 ? fzf#vim#with_preview('up:60%')
		\           : fzf#vim#with_preview('right:50%:hidden', '?'),
		\   <bang>0)
'''

# マルチカーソル
[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
	let g:multi_cursor_use_default_mapping=0

	" Default mapping
	let g:multi_cursor_start_word_key      = '<C-n>'
	let g:multi_cursor_select_all_word_key = '<A-n>'
	let g:multi_cursor_start_key           = 'g<C-n>'
	let g:multi_cursor_select_all_key      = 'g<A-n>'
	let g:multi_cursor_next_key            = '<C-n>'
	let g:multi_cursor_prev_key            = '<C-p>'
	let g:multi_cursor_skip_key            = '<C-x>'
	let g:multi_cursor_quit_key            = '<Esc>'
'''
